{"version":3,"sources":["SortingAlgorithm/SortingAlgorithm.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["mergeSortAlgorithm","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","swaps","bars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","className","map","val","key","onClick","mergeSort","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a9bff1b4.chunk.js","sourcesContent":["// export const mergeSort = array => {\n//     if(array.length === 1) return array;\n\n//     const mid = Math.floor(array.length / 2);\n//     const first = mergeSort(array.slice(0, mid));\n//     const second = mergeSort(array.slice(mid));\n//     const res = [];\n\n//     let i = 0, j = 0;\n\n//     while(i < first.length && j < second.length){\n//         if(first[i] < second[j]){\n//             res.push(first[i++]);\n//         }else{\n//             res.push(second[j++]);\n//         }\n//     }\n\n//     while(i < first.length) res.push(first[i++]);\n//     while(j < second.length) res.push(second[j++]);\n//     return res;\n// }\nexport function mergeSortAlgorithm(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }","import React from \"react\";\nimport \"./SortingVisualizer.css\";\nimport { mergeSortAlgorithm } from \"../SortingAlgorithm/SortingAlgorithm.js\";\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < 150; i++) {\n      array.push(randomNumber(10, 500));\n    }\n    this.setState({ array });\n  }\n  mergeSort() {\n    const swaps = mergeSortAlgorithm(this.state.array);\n\n    for (let i = 0; i < swaps.length; i++) {\n      const bars = document.getElementsByClassName(\"val-bar\");\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = swaps[i];\n        const barOneStyle = bars[barOneIdx].style;\n        const barTwoStyle = bars[barTwoIdx].style;\n        const color = i % 3 === 0 ? \"limegreen\" : \"magenta\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * 4);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = swaps[i];\n          const barOneStyle = bars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * 4);\n      }\n    }\n  }\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div className=\"arr-container\">\n        {array.map((val, key) => (\n          <div\n            className=\"val-bar\"\n            style={{ height: `${val}px` }}\n            key={key}\n          ></div>\n        ))}\n        {<br />}\n        <button onClick={() => this.resetArray()}>Generate new array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n      </div>\n    );\n  }\n}\nfunction randomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React from 'react'\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer> </SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}